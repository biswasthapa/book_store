require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe PublishersController, type: :controller do
  login_user

  # This should return the minimal set of attributes required to create a valid
  # Publisher. As you add validations to Publisher, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {"name": "Publisher1"}
  }

  let(:invalid_attributes) {
    {name: ""}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PublishersController. Be sure to keep this updated too.

  describe "GET #index" do
    it "assigns all publishers as @publishers" do
      publisher = Publisher.create! valid_attributes
      get :index
      expect(assigns(:publishers)).to eq([publisher])
    end
  end

  describe "GET #show" do
    it "assigns the requested publisher as @publisher" do
      publisher = Publisher.create! valid_attributes
      get :show, id: publisher.to_param
      expect(assigns(:publisher)).to eq(publisher)
    end
  end

  describe "GET #new" do
    it "assigns a new publisher as @publisher" do
      get :new
      expect(assigns(:publisher)).to be_a_new(Publisher)
    end
  end

  describe "GET #edit" do
    it "assigns the requested publisher as @publisher" do
      publisher = Publisher.create! valid_attributes
      get :edit, id: publisher.to_param
      expect(assigns(:publisher)).to eq(publisher)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Publisher" do
        expect {
          post :create, publisher: valid_attributes
        }.to change(Publisher, :count).by(1)
      end

      it "assigns a newly created publisher as @publisher" do
        post :create, publisher: valid_attributes
        expect(assigns(:publisher)).to be_a(Publisher)
        expect(assigns(:publisher)).to be_persisted
      end

      it "redirects to the created publisher" do
        post :create, publisher: valid_attributes
        expect(response).to redirect_to(Publisher.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved publisher as @publisher" do
        post :create, publisher: invalid_attributes
        expect(assigns(:publisher)).to be_a_new(Publisher)
      end

      it "re-renders the 'new' template" do
        post :create, publisher: invalid_attributes
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {name: "Publisher2"}
      }

      it "updates the requested publisher" do
        publisher = Publisher.create! valid_attributes
        put :update, {id: publisher.to_param, publisher: new_attributes}
        publisher.reload
        expect(publisher.name).to eq(new_attributes[:name])
      end

      it "assigns the requested publisher as @publisher" do
        publisher = Publisher.create! valid_attributes
        put :update, {id: publisher.to_param, publisher: valid_attributes}
        expect(assigns(:publisher)).to eq(publisher)
      end

      it "redirects to the publisher" do
        publisher = Publisher.create! valid_attributes
        put :update, {id: publisher.to_param, publisher: valid_attributes}
        expect(response).to redirect_to(publisher)
      end
    end

    context "with invalid params" do
      it "assigns the publisher as @publisher" do
        publisher = Publisher.create! valid_attributes
        put :update, {id: publisher.to_param, publisher: invalid_attributes}
        expect(assigns(:publisher)).to eq(publisher)
      end

      it "re-renders the 'edit' template" do
        publisher = Publisher.create! valid_attributes
        put :update, {id: publisher.to_param, publisher: invalid_attributes}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested publisher" do
      publisher = Publisher.create! valid_attributes
      expect {
        delete :destroy, id: publisher.to_param
      }.to change(Publisher, :count).by(-1)
    end

    it "redirects to the publishers list" do
      publisher = Publisher.create! valid_attributes
      delete :destroy, id: publisher.to_param
      expect(response).to redirect_to(publishers_url)
    end
  end

end
